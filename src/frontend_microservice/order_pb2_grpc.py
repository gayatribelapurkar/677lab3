# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import order_pb2 as order__pb2


class OrderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsAlive = channel.unary_unary(
                '/Order/IsAlive',
                request_serializer=order__pb2.IsAliveRequest.SerializeToString,
                response_deserializer=order__pb2.IsAliveReply.FromString,
                )
        self.Buy = channel.unary_unary(
                '/Order/Buy',
                request_serializer=order__pb2.BuyRequest.SerializeToString,
                response_deserializer=order__pb2.BuyReply.FromString,
                )
        self.GetOrderDetails = channel.unary_unary(
                '/Order/GetOrderDetails',
                request_serializer=order__pb2.GetOrderDetailsRequest.SerializeToString,
                response_deserializer=order__pb2.GetOrderDetailsReply.FromString,
                )
        self.GetUpdatedOrderLog = channel.unary_unary(
                '/Order/GetUpdatedOrderLog',
                request_serializer=order__pb2.UpdatedOrderLogRequest.SerializeToString,
                response_deserializer=order__pb2.UpdatedOrderLogReply.FromString,
                )
        self.RestockOrderData = channel.unary_unary(
                '/Order/RestockOrderData',
                request_serializer=order__pb2.RestockRequest.SerializeToString,
                response_deserializer=order__pb2.RestockReply.FromString,
                )
        self.UpdateReplica = channel.unary_unary(
                '/Order/UpdateReplica',
                request_serializer=order__pb2.UpdateReplicaRequest.SerializeToString,
                response_deserializer=order__pb2.UpdateReplicaReply.FromString,
                )
        self.GetMissedOrders = channel.unary_unary(
                '/Order/GetMissedOrders',
                request_serializer=order__pb2.MissedOrdersRequest.SerializeToString,
                response_deserializer=order__pb2.MissedOrdersReply.FromString,
                )
        self.GiveLeaderInfo = channel.unary_unary(
                '/Order/GiveLeaderInfo',
                request_serializer=order__pb2.GiveLeaderInfoRequest.SerializeToString,
                response_deserializer=order__pb2.GLReply.FromString,
                )
        self.GiveFollowersNodesInfo = channel.unary_unary(
                '/Order/GiveFollowersNodesInfo',
                request_serializer=order__pb2.FollowersNodesInfoRequest.SerializeToString,
                response_deserializer=order__pb2.GFNReply.FromString,
                )


class OrderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsAlive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Buy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUpdatedOrderLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestockOrderData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMissedOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GiveLeaderInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GiveFollowersNodesInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAlive,
                    request_deserializer=order__pb2.IsAliveRequest.FromString,
                    response_serializer=order__pb2.IsAliveReply.SerializeToString,
            ),
            'Buy': grpc.unary_unary_rpc_method_handler(
                    servicer.Buy,
                    request_deserializer=order__pb2.BuyRequest.FromString,
                    response_serializer=order__pb2.BuyReply.SerializeToString,
            ),
            'GetOrderDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderDetails,
                    request_deserializer=order__pb2.GetOrderDetailsRequest.FromString,
                    response_serializer=order__pb2.GetOrderDetailsReply.SerializeToString,
            ),
            'GetUpdatedOrderLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUpdatedOrderLog,
                    request_deserializer=order__pb2.UpdatedOrderLogRequest.FromString,
                    response_serializer=order__pb2.UpdatedOrderLogReply.SerializeToString,
            ),
            'RestockOrderData': grpc.unary_unary_rpc_method_handler(
                    servicer.RestockOrderData,
                    request_deserializer=order__pb2.RestockRequest.FromString,
                    response_serializer=order__pb2.RestockReply.SerializeToString,
            ),
            'UpdateReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReplica,
                    request_deserializer=order__pb2.UpdateReplicaRequest.FromString,
                    response_serializer=order__pb2.UpdateReplicaReply.SerializeToString,
            ),
            'GetMissedOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMissedOrders,
                    request_deserializer=order__pb2.MissedOrdersRequest.FromString,
                    response_serializer=order__pb2.MissedOrdersReply.SerializeToString,
            ),
            'GiveLeaderInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GiveLeaderInfo,
                    request_deserializer=order__pb2.GiveLeaderInfoRequest.FromString,
                    response_serializer=order__pb2.GLReply.SerializeToString,
            ),
            'GiveFollowersNodesInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GiveFollowersNodesInfo,
                    request_deserializer=order__pb2.FollowersNodesInfoRequest.FromString,
                    response_serializer=order__pb2.GFNReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Order', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Order(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/IsAlive',
            order__pb2.IsAliveRequest.SerializeToString,
            order__pb2.IsAliveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Buy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/Buy',
            order__pb2.BuyRequest.SerializeToString,
            order__pb2.BuyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/GetOrderDetails',
            order__pb2.GetOrderDetailsRequest.SerializeToString,
            order__pb2.GetOrderDetailsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUpdatedOrderLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/GetUpdatedOrderLog',
            order__pb2.UpdatedOrderLogRequest.SerializeToString,
            order__pb2.UpdatedOrderLogReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestockOrderData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/RestockOrderData',
            order__pb2.RestockRequest.SerializeToString,
            order__pb2.RestockReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/UpdateReplica',
            order__pb2.UpdateReplicaRequest.SerializeToString,
            order__pb2.UpdateReplicaReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMissedOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/GetMissedOrders',
            order__pb2.MissedOrdersRequest.SerializeToString,
            order__pb2.MissedOrdersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GiveLeaderInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/GiveLeaderInfo',
            order__pb2.GiveLeaderInfoRequest.SerializeToString,
            order__pb2.GLReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GiveFollowersNodesInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/GiveFollowersNodesInfo',
            order__pb2.FollowersNodesInfoRequest.SerializeToString,
            order__pb2.GFNReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
